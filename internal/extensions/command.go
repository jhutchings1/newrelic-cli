package extensions

import (
	"errors"
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"strings"

	"github.com/fatih/color"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

var (
	// ExtensionRootCommands represents the dynamic root commands generated by the extension system.
	ExtensionRootCommands []*cobra.Command
	knownExtensions       = []string{"nerdpack"}
	extensionLocation     = fmt.Sprintf("%s/.newrelic/extensions", os.Getenv("HOME"))
)

// ExtensionManifest desribes an extension's configuration.
type ExtensionManifest struct {
	Extension struct {
		Command string `yaml:"Command,omitempty"`
		Name    string `yaml:"Name,omitempty"`
		Short   string `yaml:"Short,omitempty"`
		Long    string `yaml:"Long,omitempty"`
	} `yaml:"Extension,omitempty"`
	Commands []*CommandDefinition `yaml:"Commands,omitempty"`
}

// Command represent the root extensions CLI subcommand.
var Command = &cobra.Command{
	Use:   "extensions",
	Short: "extensions commands",
}

var addExtension = &cobra.Command{
	Use:   "add",
	Short: "Add a CLI extension",
	Args: func(cmd *cobra.Command, args []string) error {
		if len(args) < 1 {
			return errors.New("requires a extension argument")
		}

		validExtension := false
		for _, p := range knownExtensions {
			if p == args[0] {
				validExtension = true
			}
		}

		if !validExtension {
			red := color.New(color.FgRed).SprintFunc()
			return fmt.Errorf("extension %s not recognized. valid extensions are %s", red(args[0]), strings.Join(knownExtensions, ","))
		}

		return nil
	},
	Run: func(cmd *cobra.Command, args []string) {
		// TODO: change this so it's not fixed to the project root
		c := exec.Command("internal/extensions/installers/" + args[0] + ".sh")
		c.Stdout = os.Stdout
		c.Stderr = os.Stderr
		err := c.Run()
		if err != nil {
			log.Fatal(err)
		}

		green := color.New(color.FgGreen).SprintFunc()
		fmt.Printf("Extension %s added.\n", green(args[0]))
	},
}

var removeExtension = &cobra.Command{
	Use:   "remove",
	Short: "Remove a CLI extension",
	Args: func(cmd *cobra.Command, args []string) error {
		if len(args) < 1 {
			return errors.New("requires a extension argument")
		}

		files, err := ioutil.ReadDir(extensionLocation)
		if err != nil {
			log.Fatal(err)
		}

		installed := false
		for _, f := range files {
			if f.IsDir() && f.Name() == args[0] {
				installed = true
			}
		}

		if !installed {
			red := color.New(color.FgRed).SprintFunc()
			return fmt.Errorf("extension %s is not installed", red(args[0]))
		}

		return nil
	},
	Run: func(cmd *cobra.Command, args []string) {
		os.RemoveAll(extensionLocation + "/" + args[0])

		green := color.New(color.FgGreen).SprintFunc()
		fmt.Printf("Extension %s removed.\n", green(args[0]))
	},
}

func init() {
	Command.AddCommand(addExtension)
	Command.AddCommand(removeExtension)

	initializeExtensions()
}
